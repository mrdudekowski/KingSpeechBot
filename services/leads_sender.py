"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –≤ —á–∞—Ç —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
"""
import asyncio
from typing import Dict, Any
from telegram import Bot
from config import WORKGROUP_CHAT_ID, TELEGRAM_BOT_TOKEN


class LeadsSenderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –≤ —á–∞—Ç —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã"""
    
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.workgroup_chat_id = WORKGROUP_CHAT_ID
    
    def format_lead_message(self, lead_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        message = "üî• –ù–û–í–´–ô –õ–ò–î –° –ë–û–¢–ê @kingspeechbot\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"üë§ –ò–º—è: {lead_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {lead_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"üåç –Ø–∑—ã–∫: {lead_data.get('language', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if lead_data.get('age'):
            message += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {lead_data['age']}\n"
        if lead_data.get('experience'):
            message += f"üìö –û–ø—ã—Ç –∏–∑—É—á–µ–Ω–∏—è: {lead_data['experience']}\n"
        if lead_data.get('goals'):
            message += f"üéØ –¶–µ–ª–∏: {lead_data['goals']}\n"
        if lead_data.get('schedule'):
            message += f"‚è∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {lead_data['schedule']}\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        if lead_data.get('timestamp'):
            message += f"\nüìÖ –ü–æ–ª—É—á–µ–Ω: {lead_data['timestamp']}"
        
        return message
    
    async def send_lead(self, lead_data: Dict[str, Any]) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–¥ –≤ —á–∞—Ç —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã"""
        try:
            if not self.workgroup_chat_id:
                print("‚ö†Ô∏è WORKGROUP_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ª–∏–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
                return False
            
            message = self.format_lead_message(lead_data)
            
            await self.bot.send_message(
                chat_id=self.workgroup_chat_id,
                text=message,
                parse_mode='HTML'
            )
            
            print(f"‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ —á–∞—Ç: {e}")
            return False
    
    def send_lead_sync(self, lead_data: Dict[str, Any]) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.send_lead(lead_data))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            return asyncio.run(self.send_lead(lead_data))


# –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
leads_sender = LeadsSenderService()
